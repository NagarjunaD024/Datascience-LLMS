!pip install opencv-python
!pip install requests

import argparse
import openai
import pandas as pd
import time
from IPython.display import Markdown, display, Image
from google.colab import files
import base64

from openai import OpenAI

from google.colab import drive
drive.mount('/content/drive')

API_KEY = userdata.get('OPENAI_API_KEY')


client = OpenAI(api_key= API_KEY)

def encode_image_to_base64(image_path):
  """Reads an image file and returns its Base64 encoded string."""
  with open(image_path, "rb") as image_file:
    return base64.b64encode(image_file.read()).decode('utf-8')

def analyze_image(image_url, question):
    """ Use language model to answer question about image.

    Args:
        image_url: URL leading to image.
        question: question about image.

    Returns:
        Answer generated by the language model.
    """
    for nr_retries in range(1, 4):
        try:
            response = client.chat.completions.create(
                model='gpt-4o',
                messages=[
                    {'role':'user', 'content':[
                        {'type':'text', 'text':question},
                        {'type':'image_url', 'image_url': {
                                    "url": f"data:image/jpeg;base64,{base64_image}",
                            }
                        }]
                    }]
                )
            return response.choices[0].message.content
        except:
            print(f"Attempt {nr_retries} failed: {e}")
            time.sleep(nr_retries * 2)
    raise Exception('Cannot query OpenAI model!')

if __name__ == '__main__':

  """
  for Script Invoking from command line with argparse ex- cd Answering questions about images.py "/content/drive/MyDrive/Colab Notebooks/DataScience+GPT/Data/image and video/fruit5.jpg" "Is this a banana ('Yes', 'No')?"
  """

    parser = argparse.ArgumentParser()
    parser.add_argument('imageurl', type=str, help='URL to image')
    parser.add_argument('question', type=str, help='Question about the image')
    args = parser.parse_args()

    print(f"Displaying image from: {args.imageurl}")
    try:
      base64_image = encode_image_to_base64(args.imageurl)

      # 2. Call the analysis function with the encoded image string
      question = "Is this a banana ('Yes', 'No')?"
      answer = analyze_image(base64_image, args.question)

      # 3. Print the result
      print(answer)
    except FileNotFoundError:
        print(f"Error: The file was not found. Please check the path: {file_path}")
    except Exception as e:
        print(f"An error occurred: {e}")